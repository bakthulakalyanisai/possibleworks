import java.util.HashMap;
import java.util.Map;

public class SecretSharing {

    // Decode the value from the given base to decimal
    public static long decodeValue(String valueStr, int base) {
        return Long.parseLong(valueStr, base);
    }

    // Lagrange Interpolation function to calculate value at x = 0 (constant term)
    public static long lagrangeInterpolation(long[] xVals, long[] yVals, long x) {
        int n = xVals.length;
        long result = 0;

        // Perform Lagrange interpolation formula
        for (int i = 0; i < n; i++) {
            long term = yVals[i];
            for (int j = 0; j < n; j++) {
                if (i != j) {
                    term = term * (x - xVals[j]) / (xVals[i] - xVals[j]);
                }
            }
            result += term;
        }

        return result;
    }

    // Function to process the test case and find the constant term (c)
    public static long findConstantTerm(Map<Integer, Map<String, String>> data) {
        int n = Integer.parseInt(data.get(0).get("n")); // Read n from "keys" entry
        int k = Integer.parseInt(data.get(0).get("k")); // Read k from "keys" entry

        // Arrays to store the x and y values of the roots
        long[] xVals = new long[k];
        long[] yVals = new long[k];

        // Extract the roots and decode the y-values
        int index = 0;
        for (int key : data.keySet()) {
            if (key != 0) { // Exclude the "keys" entry with key 0
                Map<String, String> root = data.get(key);
                int x = key;
                int base = Integer.parseInt(root.get("base"));
                String value = root.get("value");

                long y = decodeValue(value, base); // Decode the y-value
                xVals[index] = x;
                yVals[index] = y;
                index++;

                // If we have enough points, break early
                if (index == k) break;
            }
        }

        // Apply Lagrange Interpolation at x = 0 to find the constant term
        return lagrangeInterpolation(xVals, yVals, 0);
    }

    // Main function to run the program
    public static void main(String[] args) {
        // First test case (as provided in the problem statement)
        Map<Integer, Map<String, String>> testCase1 = new HashMap<>();
        
        // keys (with key 0)
        Map<String, String> keys = new HashMap<>();
        keys.put("n", "4");
        keys.put("k", "3");
        testCase1.put(0, keys); // Use integer key '0' for "keys"
        
        // roots (with respective integer keys)
        Map<String, String> root1 = new HashMap<>();
        root1.put("base", "10");
        root1.put("value", "4");
        testCase1.put(1, root1);

        Map<String, String> root2 = new HashMap<>();
        root2.put("base", "2");
        root2.put("value", "111");
        testCase1.put(2, root2);

        Map<String, String> root3 = new HashMap<>();
        root3.put("base", "10");
        root3.put("value", "12");
        testCase1.put(3, root3);

        Map<String, String> root6 = new HashMap<>();
        root6.put("base", "4");
        root6.put("value", "213");
        testCase1.put(6, root6);

        // Calculate the constant term (c)
        long constantTerm = findConstantTerm(testCase1);

        // Output the result
        System.out.println("The constant term (c) for the first test case is: " + constantTerm);

        // Second test case (as provided in the problem statement)
        Map<Integer, Map<String, String>> testCase2 = new HashMap<>();
        
        // keys (with key 0)
        Map<String, String> keys2 = new HashMap<>();
        keys2.put("n", "10");
        keys2.put("k", "7");
        testCase2.put(0, keys2); // Use integer key '0' for "keys"
        
        // roots (with respective integer keys)
        Map<String, String> root1_2 = new HashMap<>();
        root1_2.put("base", "7");
        root1_2.put("value", "420020006424065463");
        testCase2.put(1, root1_2);

        Map<String, String> root2_2 = new HashMap<>();
        root2_2.put("base", "7");
        root2_2.put("value", "10511630252064643035");
        testCase2.put(2, root2_2);

        Map<String, String> root3_2 = new HashMap<>();
        root3_2.put("base", "2");
        root3_2.put("value", "101010101001100101011100000001000111010010111101100100010");
        testCase2.put(3, root3_2);

        Map<String, String> root4_2 = new HashMap<>();
        root4_2.put("base", "8");
        root4_2.put("value", "31261003022226126015");
        testCase2.put(4, root4_2);

        Map<String, String> root5_2 = new HashMap<>();
        root5_2.put("base", "7");
        root5_2.put("value", "2564201006101516132035");
        testCase2.put(5, root5_2);

        Map<String, String> root6_2 = new HashMap<>();
        root6_2.put("base", "15");
        root6_2.put("value", "a3c97ed550c69484");
        testCase2.put(6, root6_2);

        Map<String, String> root7_2 = new HashMap<>();
        root7_2.put("base", "13");
        root7_2.put("value", "134b08c8739552a734");
        testCase2.put(7, root7_2);

        Map<String, String> root8_2 = new HashMap<>();
        root8_2.put("base", "10");
        root8_2.put("value", "23600283241050447333");
        testCase2.put(8, root8_2);

        Map<String, String> root9_2 = new HashMap<>();
        root9_2.put("base", "9");
        root9_2.put("value", "375870320616068547135");
        testCase2.put(9, root9_2);

        Map<String, String> root10_2 = new HashMap<>();
        root10_2.put("base", "6");
        root10_2.put("value", "30140555423010311322515333");
        testCase2.put(10, root10_2);

        // Calculate the constant term (c) for the second test case
        long constantTerm2 = findConstantTerm(testCase2);

        // Output the result
        System.out.println("The constant term (c) for the second test case is: " + constantTerm2);
    }
}
